{"version":3,"sources":["components/TableHeader.js","components/TableData.js","utils/SearchObject.js","components/Main.js","components/Jumbotron.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","props","directionState","onClickHandler","children","direction","onClick","scope","className","onKeyPress","role","tabIndex","aria-label","TableData","getDirection","requestSort","data","map","employee","key","id","src","picture","alt","first_name","last_name","Date","DOB","toDateString","SearchObject","array","query","filter","item","Object","values","toString","toLowerCase","includes","MainContainer","Jumbotron","title","Search","onChange","name","placeholder","type","App","useState","setData","setQuery","useEffect","employees","React","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","a","b","Main","SearchBar","e","target","value","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bbc1447.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TableHeader(props) {\r\n  const { children, direction, onClick } = props;\r\n\r\n  function sortButton(directionState, onClickHandler) {\r\n    if (onClickHandler != null) {\r\n      return directionState === 'ascending'\r\n        ? (\r\n          <i\r\n            className=\"fas fa-sort-up ml-2\"\r\n            onClick={onClickHandler}\r\n            onKeyPress={onClickHandler}\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n            aria-label=\"Ascending\"\r\n          />\r\n        )\r\n        : (\r\n          <i\r\n            className=\"fas fa-sort-down ml-2\"\r\n            onClick={onClickHandler}\r\n            onKeyPress={onClickHandler}\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n            aria-label=\"Descending \"\r\n          />\r\n        );\r\n    }\r\n    return <></>;\r\n  }\r\n  return (\r\n    <th scope=\"col\">\r\n      <div className=\"d-flex justify-content-between\">\r\n        { children }\r\n        <div className=\"d-flex flex-column justify-content-center\">\r\n          {sortButton(direction, onClick)}\r\n        </div>\r\n      </div>\r\n    </th>\r\n  );\r\n}\r\nexport default TableHeader;","import React from 'react';\r\nimport TableHeader from './TableHeader';\r\n\r\nfunction TableData(props) {\r\n  const { getDirection, requestSort, data } = props;\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table table-borderless\">\r\n        <thead>\r\n          <tr>\r\n            <TableHeader>Employee</TableHeader>\r\n            <TableHeader direction={getDirection('id')} onClick={() => requestSort('id')}>#</TableHeader>\r\n            <TableHeader direction={getDirection('first_name')} onClick={() => requestSort('first_name')}>First</TableHeader>\r\n            <TableHeader direction={getDirection('last_name')} onClick={() => requestSort('last_name')}>Last</TableHeader>\r\n            <TableHeader direction={getDirection('date_of_birth')} onClick={() => requestSort('DOB')}>Date of Birth</TableHeader>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          { data.map((employee) => (\r\n            <tr key={employee.id}>\r\n              <td><img className=\"img-thumbnail\" src={employee.picture} alt={`${employee.first_name} ${employee.last_name}`} /></td>\r\n              <td>{ employee.id }</td>\r\n              <td>{ employee.first_name }</td>\r\n              <td>{ employee.last_name }</td>\r\n              <td >{new Date(employee.DOB).toDateString()}</td>\r\n            </tr>\r\n          )) }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableData;","function SearchObject(array, query) {\r\n    return array.filter((item) => {\r\n      for (const value of Object.values(item)) {\r\n        const searchValue = value.toString().toLowerCase();\r\n        if (searchValue.includes(query.toLowerCase())) {\r\n          return item;\r\n        }\r\n      }\r\n  \r\n      return null;\r\n    });\r\n  }\r\nexport default SearchObject;","import React from 'react'\r\n\r\nfunction MainContainer(props) {\r\n    const { children } = props;\r\n\r\n    return (\r\n        <div className='container-fluid'>\r\n            { children }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContainer;","import React from 'react';\r\n\r\nfunction Jumbotron(props) {\r\n  const { title } = props;\r\n\r\n  return (\r\n    <div className=\"jumbotron text-center mt-5\">\r\n      <h1 className=\"mt-5\">{title}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\n\r\nfunction Search(props) {\r\n    const { onChange, name, placeholder } = props;\r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          name={name || 'Search'}\r\n          placeholder={ placeholder || 'Search List'}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport TableData from './components/TableData'\nimport SearchObject from './utils/SearchObject';\nimport {data as employees} from './utils/employees.json';\nimport Main from './components/Main';\nimport Jumbotron from './components/Jumbotron'\nimport SearchBar from './components/SearchBar'\n\nexport default function App() {\n  const [data, setData] = useState([])\n\n  const [query, setQuery] = useState('')\n\n  const onChangeSearch = (e) => {\n    setQuery(e.target.value)\n  }\n\n  useEffect(() => {\n    setData(SearchObject(employees, query))\n  },[query]);\n\n  const [sortConfig, setSortConfig] = React.useState({ direction: 'descending', key: 'id' });\n\n  const sortedItems = React.useMemo(() => {\n    const sortableItems = [...data];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [data, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n    setData(sortedItems);\n  };\n\n  const getDirection = (name) => {\n    if (sortConfig) {\n      return sortConfig.key === name ? sortConfig.direction : undefined;\n    }\n    return null;\n  };\n\n  return(\n    <div className=\"App\">\n    <Jumbotron title=\"Employee Directory\" />\n      \n      <Main>\n        <div className=\"mb-4 d-flex justify-content-around\">\n          <SearchBar onChange={onChangeSearch} />\n        </div>\n        <TableData getDirection={getDirection} requestSort={requestSort} data={data} />\n      </Main>\n      \n  </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}